#!/bin/sh
#PBS -l select=64:system=polaris
#PBS -l filesystems=home:eagle:grand
#PBS -l place=scatter
#PBS -l walltime=00:30:00
#PBS -q prod
#PBS -A AstroExplosions

EXEC=./Castro3d.cray.MPI.CUDA.ex
INPUTS=inputs_nova_t7

# Enable GPU-MPI (if supported by application)
##export MPICH_GPU_SUPPORT_ENABLED=1

module use /soft/modulefiles
module load PrgEnv-gnu
module load nvhpc-mixed
module load craype-accel-nvidia80
module unload nvhpc-mixed
module load cray-libsci
module load craype-x86-milan
module load PrgEnv-gnu
module load nvhpc-mixed

# Change to working directory
cd ${PBS_O_WORKDIR}

# MPI and OpenMP settings
NNODES=`wc -l < $PBS_NODEFILE`
NRANKS_PER_NODE=$(nvidia-smi -L | wc -l)
NDEPTH=8
NTHREADS=1
NTOTRANKS=$(( NNODES * NRANKS_PER_NODE ))

# If you need to start from the latest chk file, please uncomment the function
# and the lines below:

function find_chk_file {
    # find_chk_file takes a single argument -- the wildcard pattern
    # for checkpoint files to look through
    chk=$1

    # find the latest 2 restart files.  This way if the latest didn't
    # complete we fall back to the previous one.
    temp_files=$(find . -maxdepth 1 -name "${chk}" -print | sort | tail -2)
    restartFile=""
    for f in ${temp_files}
    do
        # the Header is the last thing written -- check if it's there, otherwise,
        # fall back to the second-to-last check file written
        if [ -f ${f}/Header ]; then
            restartFile="${f}"
        fi
    done

}

# look for 7-digit chk files
find_chk_file "*chk???????"

if [ "${restartFile}" = "" ]; then
    # look for 6-digit chk files
    find_chk_file "*chk??????"
fi

if [ "${restartFile}" = "" ]; then
    # look for 5-digit chk files
    find_chk_file "*chk?????"
fi

# restartString will be empty if no chk files are found -- i.e. new run
if [ "${restartFile}" = "" ]; then
    restartString=""
else
    restartString="amr.restart=${restartFile}"
fi

# If you need to restart from an specific chk file, please uncomment
# the two lines below:

# restartFile="chk2740664"
# restartString="amr.restart=${restartFile}"

# For applications that need mpiexec to bind MPI ranks to GPUs
mpiexec -n ${NTOTRANKS} --ppn ${NRANKS_PER_NODE} --depth=${NDEPTH} --cpu-bind depth --env OMP_NUM_THREADS=${NTHREADS} -env OMP_PLACES=threads ./set_affinity_gpu_polaris.sh ${EXEC} ${INPUTS} ${restartString} amrex.the_arena_init_size = 0
